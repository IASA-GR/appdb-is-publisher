enum SiteServiceDowntimeOutcome {
  ended
  upcomming
}

enum SiteServiceDowntimeSeverity {
  OUTAGE
}

enum SiteServiceDowntimeClassification {
  SCHEDULED
  UNSCHEDULED
}

type SiteServiceDowntime {
  id: ID
  downtimePKey: String
  classification: SiteServiceDowntimeClassification
  severity: SiteServiceDowntimeSeverity
  startDate: Int
  endDate: Int
  formatedStartDate: String
  formatedEndDate: String
  serviceType: String
  gocPortalUrl: String
  outcome: SiteServiceDowntimeOutcome
  site: Site
  service: SiteService
}

input SiteServiceDowntime_Filter {
  id: ID
  downtimePKey: FilterStringOperators
  classification: SiteServiceDowntimeClassification
  severity: SiteServiceDowntimeSeverity
  startDate: FilterIntegerOperators
  endDate: FilterIntegerOperators
  formatedStartDate: FilterStringOperators
  formatedEndDate: FilterStringOperators
  serviceType: FilterStringOperators
  gocPortalUrl: FilterStringOperators
  outcome: SiteServiceDowntimeOutcome
  site: Site_Filter
  service: SiteService_Filter
  #or: [SiteServiceDowntime_Filter]
  #and: [SiteServiceDowntime_Filter]
}

enum SiteServiceDowntime_Sort {
  id_asc
  ##downtimePKey_asc
  ##classification_asc
  ##severity_asc
  ##startDate_asc
  ##endDate_asc
  ##formatedStartDate_asc
  ##formatedEndDate_asc
  ##serviceType_asc
  ##gocPortalUrl_asc
  ##outcome_asc

  id_desc
  ##downtimePKey_desc
  ##classification_desc
  ##severity_desc
  ##startDate_desc
  ##endDate_desc
  ##formatedStartDate_desc
  ##formatedEndDate_desc
  ##serviceType_desc
  ##gocPortalUrl_desc
  ##outcome_desc
}

type SiteServiceDowntimeCollection {
  totalCount: Int
  count: Int
  limit: Int
  skip: Int
  sort: [SiteServiceDowntime_Sort]
  items: [SiteServiceDowntime]
}

extend type Query {
  SiteServiceDowntimeById(id: ID!): SiteServiceDowntime
  SiteServiceDowntimes(filter: SiteServiceDowntime_Filter, limit: Int, skip: Int, sort: [SiteServiceDowntime_Sort]): SiteServiceDowntimeCollection
}